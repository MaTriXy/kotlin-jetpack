DIRECTORY="src/main/generated/com/github/vmironov/jetpack/arguments"
FILE="ArgumentsGeneratedBindings.kt"
TARGET="${DIRECTORY}/${FILE}"

rm -rf $DIRECTORY
mkdir -p $DIRECTORY
touch $TARGET

println() {
  echo "$1" >> $TARGET
}

import() {
  println "import $1"
}

println "// Code generated by ./jetpack-bindings-arguments/generate.sh"
println "package com.github.vmironov.jetpack.arguments"
println

import "android.os.Bundle"
import "android.os.Parcelable"
import "java.io.Serializable"
import "kotlin.properties.ReadWriteProperty"
println

capitalize() {
  echo $(echo ${1} | tr '[:lower:]' '[:upper:]')
}

asGetterName() {
  echo GETTER_$(echo ${1} | tr '[:lower:]' '[:upper:]')
}

asSetterName() {
  echo SETTER_$(echo ${1} | tr '[:lower:]' '[:upper:]')
}

generateBinding() {
  println "public fun Any.bind${1}Argument(name: String? = null, default: ${1}? = null): ReadWriteProperty<Any, ${1}> = ArgumentsVar(this, name, default, $(asGetterName $1), $(asSetterName $1))"
}

generateOptionalBinding() {
  println "public fun Any.bindOptional${1}Argument(name: String? = null, default: ${1}? = null): ReadWriteProperty<Any, ${1}?> = OptionalArgumentsVar(this, name, default, $(asGetterName $1), $(asSetterName $1))"
}

generateGetter() {
  println "private val $(asGetterName $1): (String, Bundle) -> ${1}? = { name, bundle ->"
  println "  if (bundle.containsKey(name)) {"
  println "    bundle.get${1}(name)"
  println "  } else {"
  println "    null"
  println "  }"
  println "}"
  println ""
}

generateSetter() {
  println "private val $(asSetterName $1): (String, Bundle, ${1}?) -> Unit = { name, bundle, value ->"
  println "  if (value != null) {"
  println "    bundle.put${1}(name, value)"
  println "  } else {"
  println "    bundle.remove(name)"
  println "  }"
  println "}"
  println ""
}

TYPES=(Boolean Double Int Long String Bundle Byte Char CharSequence Float Parcelable Serializable Short)

for TYPE in "${TYPES[@]}"; do
  generateBinding $TYPE
done

println

for TYPE in "${TYPES[@]}"; do
  generateOptionalBinding $TYPE
done

println

for TYPE in "${TYPES[@]}"; do
  generateGetter $TYPE
done

for TYPE in "${TYPES[@]}"; do
  generateSetter $TYPE
done

