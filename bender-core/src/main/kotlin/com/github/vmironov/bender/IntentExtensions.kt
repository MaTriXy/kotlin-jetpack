// Code generated by ./scripts/generate-intent-extensions.sh
package com.github.vmironov.bender

import android.content.Intent
import android.os.Bundle
import android.os.IBinder
import android.os.Parcelable

import java.util.ArrayList
import java.io.Serializable

public fun Intent.putBooleanOrIgnore(key: String, value: Boolean?): Unit {
  if (value != null) {
    putExtra(key, value)
  }
}

public fun Intent.getBooleanOrNull(key: String): Boolean? {
  return if (hasExtra(key)) {
    getBooleanExtra(key, false)
  } else {
    null
  }
}

public fun Intent.getBooleanOrDefault(key: String, value: Boolean): Boolean {
  return getBooleanOrNull(key) ?: value
}

public fun Intent.getBooleanOrThrow(key: String): Boolean {
  return getBooleanOrNull(key) ?: throw IllegalStateException("Key ${key} is missed")
}

public fun Intent.putBooleanArrayOrIgnore(key: String, value: BooleanArray?): Unit {
  if (value != null) {
    putExtra(key, value)
  }
}

public fun Intent.getBooleanArrayOrNull(key: String): BooleanArray? {
  return if (hasExtra(key)) {
    getBooleanArrayExtra(key)
  } else {
    null
  }
}

public fun Intent.getBooleanArrayOrDefault(key: String, value: BooleanArray): BooleanArray {
  return getBooleanArrayOrNull(key) ?: value
}

public fun Intent.getBooleanArrayOrThrow(key: String): BooleanArray {
  return getBooleanArrayOrNull(key) ?: throw IllegalStateException("Key ${key} is missed")
}

public fun Intent.putDoubleOrIgnore(key: String, value: Double?): Unit {
  if (value != null) {
    putExtra(key, value)
  }
}

public fun Intent.getDoubleOrNull(key: String): Double? {
  return if (hasExtra(key)) {
    getDoubleExtra(key, 0.0)
  } else {
    null
  }
}

public fun Intent.getDoubleOrDefault(key: String, value: Double): Double {
  return getDoubleOrNull(key) ?: value
}

public fun Intent.getDoubleOrThrow(key: String): Double {
  return getDoubleOrNull(key) ?: throw IllegalStateException("Key ${key} is missed")
}

public fun Intent.putDoubleArrayOrIgnore(key: String, value: DoubleArray?): Unit {
  if (value != null) {
    putExtra(key, value)
  }
}

public fun Intent.getDoubleArrayOrNull(key: String): DoubleArray? {
  return if (hasExtra(key)) {
    getDoubleArrayExtra(key)
  } else {
    null
  }
}

public fun Intent.getDoubleArrayOrDefault(key: String, value: DoubleArray): DoubleArray {
  return getDoubleArrayOrNull(key) ?: value
}

public fun Intent.getDoubleArrayOrThrow(key: String): DoubleArray {
  return getDoubleArrayOrNull(key) ?: throw IllegalStateException("Key ${key} is missed")
}

public fun Intent.putIntOrIgnore(key: String, value: Int?): Unit {
  if (value != null) {
    putExtra(key, value)
  }
}

public fun Intent.getIntOrNull(key: String): Int? {
  return if (hasExtra(key)) {
    getIntExtra(key, 0)
  } else {
    null
  }
}

public fun Intent.getIntOrDefault(key: String, value: Int): Int {
  return getIntOrNull(key) ?: value
}

public fun Intent.getIntOrThrow(key: String): Int {
  return getIntOrNull(key) ?: throw IllegalStateException("Key ${key} is missed")
}

public fun Intent.putIntArrayOrIgnore(key: String, value: IntArray?): Unit {
  if (value != null) {
    putExtra(key, value)
  }
}

public fun Intent.getIntArrayOrNull(key: String): IntArray? {
  return if (hasExtra(key)) {
    getIntArrayExtra(key)
  } else {
    null
  }
}

public fun Intent.getIntArrayOrDefault(key: String, value: IntArray): IntArray {
  return getIntArrayOrNull(key) ?: value
}

public fun Intent.getIntArrayOrThrow(key: String): IntArray {
  return getIntArrayOrNull(key) ?: throw IllegalStateException("Key ${key} is missed")
}

public fun Intent.putLongOrIgnore(key: String, value: Long?): Unit {
  if (value != null) {
    putExtra(key, value)
  }
}

public fun Intent.getLongOrNull(key: String): Long? {
  return if (hasExtra(key)) {
    getLongExtra(key, 0L)
  } else {
    null
  }
}

public fun Intent.getLongOrDefault(key: String, value: Long): Long {
  return getLongOrNull(key) ?: value
}

public fun Intent.getLongOrThrow(key: String): Long {
  return getLongOrNull(key) ?: throw IllegalStateException("Key ${key} is missed")
}

public fun Intent.putLongArrayOrIgnore(key: String, value: LongArray?): Unit {
  if (value != null) {
    putExtra(key, value)
  }
}

public fun Intent.getLongArrayOrNull(key: String): LongArray? {
  return if (hasExtra(key)) {
    getLongArrayExtra(key)
  } else {
    null
  }
}

public fun Intent.getLongArrayOrDefault(key: String, value: LongArray): LongArray {
  return getLongArrayOrNull(key) ?: value
}

public fun Intent.getLongArrayOrThrow(key: String): LongArray {
  return getLongArrayOrNull(key) ?: throw IllegalStateException("Key ${key} is missed")
}

public fun Intent.putStringOrIgnore(key: String, value: String?): Unit {
  if (value != null) {
    putExtra(key, value)
  }
}

public fun Intent.getStringOrNull(key: String): String? {
  return if (hasExtra(key)) {
    getStringExtra(key)
  } else {
    null
  }
}

public fun Intent.getStringOrDefault(key: String, value: String): String {
  return getStringOrNull(key) ?: value
}

public fun Intent.getStringOrThrow(key: String): String {
  return getStringOrNull(key) ?: throw IllegalStateException("Key ${key} is missed")
}

public fun Intent.putStringArrayOrIgnore(key: String, value: Array<String>?): Unit {
  if (value != null) {
    putExtra(key, value)
  }
}

public fun Intent.getStringArrayOrNull(key: String): Array<String>? {
  return if (hasExtra(key)) {
    getStringArrayExtra(key)
  } else {
    null
  }
}

public fun Intent.getStringArrayOrDefault(key: String, value: Array<String>): Array<String> {
  return getStringArrayOrNull(key) ?: value
}

public fun Intent.getStringArrayOrThrow(key: String): Array<String> {
  return getStringArrayOrNull(key) ?: throw IllegalStateException("Key ${key} is missed")
}

public fun Intent.putBundleOrIgnore(key: String, value: Bundle?): Unit {
  if (value != null) {
    putExtra(key, value)
  }
}

public fun Intent.getBundleOrNull(key: String): Bundle? {
  return if (hasExtra(key)) {
    getBundleExtra(key)
  } else {
    null
  }
}

public fun Intent.getBundleOrDefault(key: String, value: Bundle): Bundle {
  return getBundleOrNull(key) ?: value
}

public fun Intent.getBundleOrThrow(key: String): Bundle {
  return getBundleOrNull(key) ?: throw IllegalStateException("Key ${key} is missed")
}

public fun Intent.putByteOrIgnore(key: String, value: Byte?): Unit {
  if (value != null) {
    putExtra(key, value)
  }
}

public fun Intent.getByteOrNull(key: String): Byte? {
  return if (hasExtra(key)) {
    getByteExtra(key, 0)
  } else {
    null
  }
}

public fun Intent.getByteOrDefault(key: String, value: Byte): Byte {
  return getByteOrNull(key) ?: value
}

public fun Intent.getByteOrThrow(key: String): Byte {
  return getByteOrNull(key) ?: throw IllegalStateException("Key ${key} is missed")
}

public fun Intent.putByteArrayOrIgnore(key: String, value: ByteArray?): Unit {
  if (value != null) {
    putExtra(key, value)
  }
}

public fun Intent.getByteArrayOrNull(key: String): ByteArray? {
  return if (hasExtra(key)) {
    getByteArrayExtra(key)
  } else {
    null
  }
}

public fun Intent.getByteArrayOrDefault(key: String, value: ByteArray): ByteArray {
  return getByteArrayOrNull(key) ?: value
}

public fun Intent.getByteArrayOrThrow(key: String): ByteArray {
  return getByteArrayOrNull(key) ?: throw IllegalStateException("Key ${key} is missed")
}

public fun Intent.putCharOrIgnore(key: String, value: Char?): Unit {
  if (value != null) {
    putExtra(key, value)
  }
}

public fun Intent.getCharOrNull(key: String): Char? {
  return if (hasExtra(key)) {
    getCharExtra(key, '0')
  } else {
    null
  }
}

public fun Intent.getCharOrDefault(key: String, value: Char): Char {
  return getCharOrNull(key) ?: value
}

public fun Intent.getCharOrThrow(key: String): Char {
  return getCharOrNull(key) ?: throw IllegalStateException("Key ${key} is missed")
}

public fun Intent.putCharArrayOrIgnore(key: String, value: CharArray?): Unit {
  if (value != null) {
    putExtra(key, value)
  }
}

public fun Intent.getCharArrayOrNull(key: String): CharArray? {
  return if (hasExtra(key)) {
    getCharArrayExtra(key)
  } else {
    null
  }
}

public fun Intent.getCharArrayOrDefault(key: String, value: CharArray): CharArray {
  return getCharArrayOrNull(key) ?: value
}

public fun Intent.getCharArrayOrThrow(key: String): CharArray {
  return getCharArrayOrNull(key) ?: throw IllegalStateException("Key ${key} is missed")
}

public fun Intent.putCharSequenceOrIgnore(key: String, value: CharSequence?): Unit {
  if (value != null) {
    putExtra(key, value)
  }
}

public fun Intent.getCharSequenceOrNull(key: String): CharSequence? {
  return if (hasExtra(key)) {
    getCharSequenceExtra(key)
  } else {
    null
  }
}

public fun Intent.getCharSequenceOrDefault(key: String, value: CharSequence): CharSequence {
  return getCharSequenceOrNull(key) ?: value
}

public fun Intent.getCharSequenceOrThrow(key: String): CharSequence {
  return getCharSequenceOrNull(key) ?: throw IllegalStateException("Key ${key} is missed")
}

public fun Intent.putCharSequenceArrayListOrIgnore(key: String, value: ArrayList<CharSequence>?): Unit {
  if (value != null) {
    putExtra(key, value)
  }
}

public fun Intent.getCharSequenceArrayListOrNull(key: String): ArrayList<CharSequence>? {
  return if (hasExtra(key)) {
    getCharSequenceArrayListExtra(key)
  } else {
    null
  }
}

public fun Intent.getCharSequenceArrayListOrDefault(key: String, value: ArrayList<CharSequence>): ArrayList<CharSequence> {
  return getCharSequenceArrayListOrNull(key) ?: value
}

public fun Intent.getCharSequenceArrayListOrThrow(key: String): ArrayList<CharSequence> {
  return getCharSequenceArrayListOrNull(key) ?: throw IllegalStateException("Key ${key} is missed")
}

public fun Intent.putFloatOrIgnore(key: String, value: Float?): Unit {
  if (value != null) {
    putExtra(key, value)
  }
}

public fun Intent.getFloatOrNull(key: String): Float? {
  return if (hasExtra(key)) {
    getFloatExtra(key, 0.0f)
  } else {
    null
  }
}

public fun Intent.getFloatOrDefault(key: String, value: Float): Float {
  return getFloatOrNull(key) ?: value
}

public fun Intent.getFloatOrThrow(key: String): Float {
  return getFloatOrNull(key) ?: throw IllegalStateException("Key ${key} is missed")
}

public fun Intent.putFloatArrayOrIgnore(key: String, value: FloatArray?): Unit {
  if (value != null) {
    putExtra(key, value)
  }
}

public fun Intent.getFloatArrayOrNull(key: String): FloatArray? {
  return if (hasExtra(key)) {
    getFloatArrayExtra(key)
  } else {
    null
  }
}

public fun Intent.getFloatArrayOrDefault(key: String, value: FloatArray): FloatArray {
  return getFloatArrayOrNull(key) ?: value
}

public fun Intent.getFloatArrayOrThrow(key: String): FloatArray {
  return getFloatArrayOrNull(key) ?: throw IllegalStateException("Key ${key} is missed")
}

public fun Intent.putIntegerArrayListOrIgnore(key: String, value: ArrayList<Int>?): Unit {
  if (value != null) {
    putExtra(key, value)
  }
}

public fun Intent.getIntegerArrayListOrNull(key: String): ArrayList<Int>? {
  return if (hasExtra(key)) {
    getIntegerArrayListExtra(key)
  } else {
    null
  }
}

public fun Intent.getIntegerArrayListOrDefault(key: String, value: ArrayList<Int>): ArrayList<Int> {
  return getIntegerArrayListOrNull(key) ?: value
}

public fun Intent.getIntegerArrayListOrThrow(key: String): ArrayList<Int> {
  return getIntegerArrayListOrNull(key) ?: throw IllegalStateException("Key ${key} is missed")
}

public fun Intent.putParcelableOrIgnore(key: String, value: Parcelable?): Unit {
  if (value != null) {
    putExtra(key, value)
  }
}

public fun Intent.getParcelableOrNull(key: String): Parcelable? {
  return if (hasExtra(key)) {
    getParcelableExtra(key)
  } else {
    null
  }
}

public fun Intent.getParcelableOrDefault(key: String, value: Parcelable): Parcelable {
  return getParcelableOrNull(key) ?: value
}

public fun Intent.getParcelableOrThrow(key: String): Parcelable {
  return getParcelableOrNull(key) ?: throw IllegalStateException("Key ${key} is missed")
}

public fun Intent.putParcelableArrayOrIgnore(key: String, value: Array<Parcelable>?): Unit {
  if (value != null) {
    putExtra(key, value)
  }
}

public fun Intent.getParcelableArrayOrNull(key: String): Array<Parcelable>? {
  return if (hasExtra(key)) {
    getParcelableArrayExtra(key)
  } else {
    null
  }
}

public fun Intent.getParcelableArrayOrDefault(key: String, value: Array<Parcelable>): Array<Parcelable> {
  return getParcelableArrayOrNull(key) ?: value
}

public fun Intent.getParcelableArrayOrThrow(key: String): Array<Parcelable> {
  return getParcelableArrayOrNull(key) ?: throw IllegalStateException("Key ${key} is missed")
}

public fun Intent.putParcelableArrayListOrIgnore(key: String, value: ArrayList<Parcelable>?): Unit {
  if (value != null) {
    putExtra(key, value)
  }
}

public fun Intent.getParcelableArrayListOrNull(key: String): ArrayList<Parcelable>? {
  return if (hasExtra(key)) {
    getParcelableArrayListExtra(key)
  } else {
    null
  }
}

public fun Intent.getParcelableArrayListOrDefault(key: String, value: ArrayList<Parcelable>): ArrayList<Parcelable> {
  return getParcelableArrayListOrNull(key) ?: value
}

public fun Intent.getParcelableArrayListOrThrow(key: String): ArrayList<Parcelable> {
  return getParcelableArrayListOrNull(key) ?: throw IllegalStateException("Key ${key} is missed")
}

public fun Intent.putSerializableOrIgnore(key: String, value: Serializable?): Unit {
  if (value != null) {
    putExtra(key, value)
  }
}

public fun Intent.getSerializableOrNull(key: String): Serializable? {
  return if (hasExtra(key)) {
    getSerializableExtra(key)
  } else {
    null
  }
}

public fun Intent.getSerializableOrDefault(key: String, value: Serializable): Serializable {
  return getSerializableOrNull(key) ?: value
}

public fun Intent.getSerializableOrThrow(key: String): Serializable {
  return getSerializableOrNull(key) ?: throw IllegalStateException("Key ${key} is missed")
}

public fun Intent.putShortOrIgnore(key: String, value: Short?): Unit {
  if (value != null) {
    putExtra(key, value)
  }
}

public fun Intent.getShortOrNull(key: String): Short? {
  return if (hasExtra(key)) {
    getShortExtra(key, 0)
  } else {
    null
  }
}

public fun Intent.getShortOrDefault(key: String, value: Short): Short {
  return getShortOrNull(key) ?: value
}

public fun Intent.getShortOrThrow(key: String): Short {
  return getShortOrNull(key) ?: throw IllegalStateException("Key ${key} is missed")
}

public fun Intent.putShortArrayOrIgnore(key: String, value: ShortArray?): Unit {
  if (value != null) {
    putExtra(key, value)
  }
}

public fun Intent.getShortArrayOrNull(key: String): ShortArray? {
  return if (hasExtra(key)) {
    getShortArrayExtra(key)
  } else {
    null
  }
}

public fun Intent.getShortArrayOrDefault(key: String, value: ShortArray): ShortArray {
  return getShortArrayOrNull(key) ?: value
}

public fun Intent.getShortArrayOrThrow(key: String): ShortArray {
  return getShortArrayOrNull(key) ?: throw IllegalStateException("Key ${key} is missed")
}

