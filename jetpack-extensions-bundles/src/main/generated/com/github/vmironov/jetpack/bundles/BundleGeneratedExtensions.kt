// Code generated by ./jetpack-bundles/generate.sh
package com.github.vmironov.jetpack.bundles

import android.os.Bundle
import android.os.IBinder
import android.os.Parcelable

import java.util.ArrayList
import java.io.Serializable

public fun Bundle.putBooleanOrIgnore(key: String, value: Boolean?): Unit {
  if (value != null) {
    putBoolean(key, value)
  }
}

public fun Bundle.getBooleanOrNull(key: String): Boolean? {
  return if (containsKey(key)) {
    getBoolean(key)
  } else {
    null
  }
}

public fun Bundle.getBooleanOrDefault(key: String, value: Boolean): Boolean {
  return getBooleanOrNull(key) ?: value
}

public fun Bundle.getBooleanOrThrow(key: String): Boolean {
  return getBooleanOrNull(key) ?: throw IllegalStateException("Key $key is missed")
}

public fun Bundle.putDoubleOrIgnore(key: String, value: Double?): Unit {
  if (value != null) {
    putDouble(key, value)
  }
}

public fun Bundle.getDoubleOrNull(key: String): Double? {
  return if (containsKey(key)) {
    getDouble(key)
  } else {
    null
  }
}

public fun Bundle.getDoubleOrDefault(key: String, value: Double): Double {
  return getDoubleOrNull(key) ?: value
}

public fun Bundle.getDoubleOrThrow(key: String): Double {
  return getDoubleOrNull(key) ?: throw IllegalStateException("Key $key is missed")
}

public fun Bundle.putIntOrIgnore(key: String, value: Int?): Unit {
  if (value != null) {
    putInt(key, value)
  }
}

public fun Bundle.getIntOrNull(key: String): Int? {
  return if (containsKey(key)) {
    getInt(key)
  } else {
    null
  }
}

public fun Bundle.getIntOrDefault(key: String, value: Int): Int {
  return getIntOrNull(key) ?: value
}

public fun Bundle.getIntOrThrow(key: String): Int {
  return getIntOrNull(key) ?: throw IllegalStateException("Key $key is missed")
}

public fun Bundle.putLongOrIgnore(key: String, value: Long?): Unit {
  if (value != null) {
    putLong(key, value)
  }
}

public fun Bundle.getLongOrNull(key: String): Long? {
  return if (containsKey(key)) {
    getLong(key)
  } else {
    null
  }
}

public fun Bundle.getLongOrDefault(key: String, value: Long): Long {
  return getLongOrNull(key) ?: value
}

public fun Bundle.getLongOrThrow(key: String): Long {
  return getLongOrNull(key) ?: throw IllegalStateException("Key $key is missed")
}

public fun Bundle.putStringOrIgnore(key: String, value: String?): Unit {
  if (value != null) {
    putString(key, value)
  }
}

public fun Bundle.getStringOrNull(key: String): String? {
  return if (containsKey(key)) {
    getString(key)
  } else {
    null
  }
}

public fun Bundle.getStringOrDefault(key: String, value: String): String {
  return getStringOrNull(key) ?: value
}

public fun Bundle.getStringOrThrow(key: String): String {
  return getStringOrNull(key) ?: throw IllegalStateException("Key $key is missed")
}

public fun Bundle.putBundleOrIgnore(key: String, value: Bundle?): Unit {
  if (value != null) {
    putBundle(key, value)
  }
}

public fun Bundle.getBundleOrNull(key: String): Bundle? {
  return if (containsKey(key)) {
    getBundle(key)
  } else {
    null
  }
}

public fun Bundle.getBundleOrDefault(key: String, value: Bundle): Bundle {
  return getBundleOrNull(key) ?: value
}

public fun Bundle.getBundleOrThrow(key: String): Bundle {
  return getBundleOrNull(key) ?: throw IllegalStateException("Key $key is missed")
}

public fun Bundle.putByteOrIgnore(key: String, value: Byte?): Unit {
  if (value != null) {
    putByte(key, value)
  }
}

public fun Bundle.getByteOrNull(key: String): Byte? {
  return if (containsKey(key)) {
    getByte(key)
  } else {
    null
  }
}

public fun Bundle.getByteOrDefault(key: String, value: Byte): Byte {
  return getByteOrNull(key) ?: value
}

public fun Bundle.getByteOrThrow(key: String): Byte {
  return getByteOrNull(key) ?: throw IllegalStateException("Key $key is missed")
}

public fun Bundle.putCharOrIgnore(key: String, value: Char?): Unit {
  if (value != null) {
    putChar(key, value)
  }
}

public fun Bundle.getCharOrNull(key: String): Char? {
  return if (containsKey(key)) {
    getChar(key)
  } else {
    null
  }
}

public fun Bundle.getCharOrDefault(key: String, value: Char): Char {
  return getCharOrNull(key) ?: value
}

public fun Bundle.getCharOrThrow(key: String): Char {
  return getCharOrNull(key) ?: throw IllegalStateException("Key $key is missed")
}

public fun Bundle.putCharSequenceOrIgnore(key: String, value: CharSequence?): Unit {
  if (value != null) {
    putCharSequence(key, value)
  }
}

public fun Bundle.getCharSequenceOrNull(key: String): CharSequence? {
  return if (containsKey(key)) {
    getCharSequence(key)
  } else {
    null
  }
}

public fun Bundle.getCharSequenceOrDefault(key: String, value: CharSequence): CharSequence {
  return getCharSequenceOrNull(key) ?: value
}

public fun Bundle.getCharSequenceOrThrow(key: String): CharSequence {
  return getCharSequenceOrNull(key) ?: throw IllegalStateException("Key $key is missed")
}

public fun Bundle.putFloatOrIgnore(key: String, value: Float?): Unit {
  if (value != null) {
    putFloat(key, value)
  }
}

public fun Bundle.getFloatOrNull(key: String): Float? {
  return if (containsKey(key)) {
    getFloat(key)
  } else {
    null
  }
}

public fun Bundle.getFloatOrDefault(key: String, value: Float): Float {
  return getFloatOrNull(key) ?: value
}

public fun Bundle.getFloatOrThrow(key: String): Float {
  return getFloatOrNull(key) ?: throw IllegalStateException("Key $key is missed")
}

public fun Bundle.putParcelableOrIgnore(key: String, value: Parcelable?): Unit {
  if (value != null) {
    putParcelable(key, value)
  }
}

public fun Bundle.getParcelableOrNull(key: String): Parcelable? {
  return if (containsKey(key)) {
    getParcelable(key)
  } else {
    null
  }
}

public fun Bundle.getParcelableOrDefault(key: String, value: Parcelable): Parcelable {
  return getParcelableOrNull(key) ?: value
}

public fun Bundle.getParcelableOrThrow(key: String): Parcelable {
  return getParcelableOrNull(key) ?: throw IllegalStateException("Key $key is missed")
}

public fun Bundle.putSerializableOrIgnore(key: String, value: Serializable?): Unit {
  if (value != null) {
    putSerializable(key, value)
  }
}

public fun Bundle.getSerializableOrNull(key: String): Serializable? {
  return if (containsKey(key)) {
    getSerializable(key)
  } else {
    null
  }
}

public fun Bundle.getSerializableOrDefault(key: String, value: Serializable): Serializable {
  return getSerializableOrNull(key) ?: value
}

public fun Bundle.getSerializableOrThrow(key: String): Serializable {
  return getSerializableOrNull(key) ?: throw IllegalStateException("Key $key is missed")
}

public fun Bundle.putShortOrIgnore(key: String, value: Short?): Unit {
  if (value != null) {
    putShort(key, value)
  }
}

public fun Bundle.getShortOrNull(key: String): Short? {
  return if (containsKey(key)) {
    getShort(key)
  } else {
    null
  }
}

public fun Bundle.getShortOrDefault(key: String, value: Short): Short {
  return getShortOrNull(key) ?: value
}

public fun Bundle.getShortOrThrow(key: String): Short {
  return getShortOrNull(key) ?: throw IllegalStateException("Key $key is missed")
}

