DIRECTORY="src/main/generated/com/github/vmironov/jetpack/bundles"
FILE="BundleGeneratedExtensions.kt"
TARGET="${DIRECTORY}/${FILE}"

rm -rf $DIRECTORY
mkdir -p $DIRECTORY
touch $TARGET

println() {
  echo "$1" >> $TARGET
}

import() {
  println "import $1"
}

putOrIgnore() {
  println "public fun Bundle.put${1}OrIgnore(key: String, value: ${2}?): Unit {"
  println "  if (value != null) {"
  println "    put${1}(key, value)"
  println "  }"
  println "}"
  println ""
}

getOrNull() {
  println "public fun Bundle.get${1}OrNull(key: String): ${2}? {"
  println "  return if (containsKey(key)) {"
  println "    get${1}(key)"
  println "  } else {"
  println "    null"
  println "  }"
  println "}"
  println ""
}

getOrThrow() {
  println "public fun Bundle.get${1}OrThrow(key: String): ${2} {"
  println "  return get${1}OrNull(key) ?: throw IllegalStateException(\"Key \$key is missed\")"
  println "}"
  println ""
}

getOrDefault() {
  println "public fun Bundle.get${1}OrDefault(key: String, value: ${2}): ${2} {"
  println "  return get${1}OrNull(key) ?: value"
  println "}"
  println ""
}

generate() {
  putOrIgnore $1 $2
  getOrNull $1 $2
  getOrDefault $1 $2
  getOrThrow $1 $2
}

println "// Code generated by ./jetpack-extensions-bundles/generate.sh"
println "package com.github.vmironov.jetpack.bundles"
println

import "android.os.Bundle"
import "android.os.IBinder"
import "android.os.Parcelable"
println

import "java.util.ArrayList"
import "java.io.Serializable"
println

generate "Boolean" "Boolean"
generate "Double" "Double"
generate "Int" "Int"
generate "Long" "Long"
generate "String" "String"
generate "Bundle" "Bundle"
generate "Byte" "Byte"
generate "Char" "Char"
generate "CharSequence" "CharSequence"
generate "Float" "Float"
generate "Parcelable" "Parcelable"
generate "Serializable" "Serializable"
generate "Short" "Short"

# generate "BooleanArray" "BooleanArray"
# generate "DoubleArray" "DoubleArray"
# generate "IntArray" "IntArray"
# generate "LongArray" "LongArray"
# generate "StringArray" "Array<String>"
# generate "ByteArray" "ByteArray"
# generate "CharArray" "CharArray"
# generate "CharSequenceArrayList" "ArrayList<CharSequence>"
# generate "FloatArray" "FloatArray"
# generate "IntegerArrayList" "ArrayList<Int>"
# generate "ParcelableArray" "Array<Parcelable>"
# generate "ParcelableArrayList" "ArrayList<Parcelable>"
# generate "ShortArray" "ShortArray"
