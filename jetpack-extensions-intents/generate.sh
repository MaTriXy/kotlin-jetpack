DIRECTORY="src/main/generated/com/github/vmironov/jetpack/intents"
FILE="IntentGeneratedExtensions.kt"
TARGET="${DIRECTORY}/${FILE}"

rm -rf $DIRECTORY
mkdir -p $DIRECTORY
touch $TARGET

println() {
  echo "$1" >> $TARGET
}

import() {
  println "import $1"
}

putOrIgnore() {
  println "public fun Intent.putExtraOrIgnore(key: String, value: ${2}?): Unit {"
  println "  if (value != null) {"
  println "    putExtra(key, value)"
  println "  }"
  println "}"
  println ""
}

getOrNull() {
  println "public fun Intent.get${1}ExtraOrNull(key: String): ${2}? {"
  println "  return if (hasExtra(key)) {"
  if [ -z "$3" ]; then
    println "    get${1}Extra(key)"
  else
    println "    get${1}Extra(key, ${3})"
  fi
  println "  } else {"
  println "    null"
  println "  }"
  println "}"
  println ""
}

getOrThrow() {
  println "public fun Intent.get${1}ExtraOrThrow(key: String): ${2} {"
  println "  return get${1}ExtraOrNull(key) ?: throw IllegalStateException(\"Key \$key is missed\")"
  println "}"
  println ""
}

getOrDefault() {
  println "public fun Intent.get${1}ExtraOrDefault(key: String, value: ${2}): ${2} {"
  println "  return get${1}ExtraOrNull(key) ?: value"
  println "}"
  println ""
}

generate() {
  putOrIgnore $1 $2 $3
  getOrNull $1 $2 $3
  getOrDefault $1 $2 $3
  getOrThrow $1 $2 $3
}

println "// Code generated by ./jetpack-extensions-bundles/generate.sh"
println "package com.github.vmironov.jetpack.intents"
println

import "android.content.Intent"
import "android.os.Bundle"
import "android.os.Parcelable"
println

import "java.io.Serializable"
println

generate "Boolean" "Boolean" "false"
generate "Double" "Double" "0.0"
generate "Int" "Int" "0"
generate "Long" "Long" "0L"
generate "String" "String"
generate "Bundle" "Bundle"
generate "Byte" "Byte" "0"
generate "Char" "Char" "'0'"
generate "Float" "Float" "0.0f"
generate "Parcelable" "Parcelable"
generate "Serializable" "Serializable"
generate "Short" "Short" "0"

# generate "BooleanArray" "BooleanArray"
# generate "DoubleArray" "DoubleArray"
# generate "IntArray" "IntArray"
# generate "LongArray" "LongArray"
# generate "StringArray" "Array<String>"
# generate "ByteArray" "ByteArray"
# generate "CharArray" "CharArray"
# generate "CharSequence" "CharSequence"
# generate "FloatArray" "FloatArray"
# generate "ParcelableArray" "Array<Parcelable>"
# generate "ShortArray" "ShortArray"
